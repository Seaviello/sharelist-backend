// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User } from './prisma-client';
import { Context } from '../types';

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export type CurrentUserResolver = (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    export interface Type {
        currentUser: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
    }
}

export namespace UserResolvers {
    export const defaultResolvers = {
        id: (parent: User) => parent.id,
        name: (parent: User) => parent.name,
        email: (parent: User) => parent.email,
        password: (parent: User) => parent.password,
        resetToken: (parent: User) =>
            parent.resetToken === undefined ? null : parent.resetToken,
        resetTokenExpiry: (parent: User) =>
            parent.resetTokenExpiry === undefined
                ? null
                : parent.resetTokenExpiry,
        createdAt: (parent: User) => parent.createdAt,
        updatedAt: (parent: User) => parent.updatedAt,
    };

    export type IdResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export type NameResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export type EmailResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export type PasswordResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export type ResetTokenResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    export type ResetTokenExpiryResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => number | null | Promise<number | null>;

    export type CreatedAtResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export type UpdatedAtResolver = (
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    export interface Type {
        id: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;

        name: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;

        email: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;

        password: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;

        resetToken: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;

        resetTokenExpiry: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => number | null | Promise<number | null>;

        createdAt: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;

        updatedAt: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => string | Promise<string>;
    }
}

export namespace MutationResolvers {
    export const defaultResolvers = {};

    export interface ArgsSignup {
        email: string;
        password: string;
        name: string;
    }

    export interface ArgsSignin {
        email: string;
        password: string;
    }

    export type SignupResolver = (
        parent: undefined,
        args: ArgsSignup,
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    export type SigninResolver = (
        parent: undefined,
        args: ArgsSignin,
        ctx: Context,
        info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    export interface Type {
        signup: (
            parent: undefined,
            args: ArgsSignup,
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => User | Promise<User>;

        signin: (
            parent: undefined,
            args: ArgsSignin,
            ctx: Context,
            info: GraphQLResolveInfo,
        ) => User | Promise<User>;
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    User: UserResolvers.Type;
    Mutation: MutationResolvers.Type;
}
